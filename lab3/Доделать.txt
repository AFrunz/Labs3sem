1. Переделать cin и getNum(по необходимости), создать функцию диалогового ввода, соответственно подправить dialog
2. Организовать диалог через массив ссылок на функции




В конструкторах предполагалось использование инициализации, а не присваивания.(Возможно)

Оператор >> (ввода значений), организован не верно.
Он должен вести себя также как обычный..
Например std::cin >> x, где х - int,
при неверном вводе (допустим char) программа не просит пользователя
вводить значения пока они не будут правильными,
она изменяет состояние istream (badbit, eofbit = 1 или что-то типа того).
Предполагалось, что внутри тела оператора должно быть только input >> a
(то что нужно ввести) и input.setstate(std::ios::failbit) если объект не может находиться в таком состоянии.
Представленный цикл while(...) должен быть снаружи оператора.


Так же я считаю неправильным использование функции GetNum(a),
по той же причине(цикл while() внутри), и
что в процессе их (оператора и функции) выполнения осуществляется вывод.
cin.good()/eof() и тд должны быть снаружи оператора и обеспечивать цикл while(неправильный ввод). пример:
while(1)
{
	Cin >> obj; 	(оператор)
	if(cin.good())....
cin.ignore/clear()И тд
}


нет смысла делать шаблон функции ввода числа,тк в задании только инт.



 Функцию сорт можно было бы не заносить в private.
  В сортировке следует предусмотреть случай когда элементов в массиве меньше 3 и иметь возможность провести ее по убыванию.


  2)Отлавливать исключения можно отлавливать не в main(), а в специальных для этого функциях.
  Так человеку, использующему Ваш код, будет удобнее.










//  3)Хорошая идея с модификаторами const у функций.

